'''
Задача 67
Максимальная сумма пути 2
Начиная с вершины представленного ниже треугольника и переходя к прилежащим числам в следующем ряду, 
максимальная возможная сумма пройденных чисел по пути от вершины до основания равна 23.

3
7 4
2 4 6
8 5 9 3

Т.е., 3 + 7 + 4 + 9 = 23.

Найти максимальную сумму при переходе от вершины до основания треугольника, 
представленного текстовым файлом размером 15КБ triangle.txt (щелкнуть правой 
кнопкой мыши и выбрать 'Save Link/Target As...'), в котором содержится треугольник 
с одной сотней строк.

ПРИМЕЧАНИЕ: Это намного усложненная версия 18-й задачи. Данную задачу нельзя решить, 
испробовав каждый возможный вариант, поскольку всего их 299! Если бы удалось проверять 
один триллион (1012) вариантов в секунду, потребовалось бы двадцать биллионов лет, чтобы 
испробовать их все. Существует эффективный алгоритм решения данной задачи. ;o)


'''
from time import time

def main():
    start = time()

    with open("triangle.txt", "r") as f:
        k = [x[:-1] for x in f]
        new = [x.split(" ") for x in k]
    for x in range(len(new)-1,0,-1):
        for i in range(len(new[x-1])):
            if int(new[x-1][i])+int(new[x][i])>int(new[x-1][i])+int(new[x][i+1]):
                new[x-1].insert(i,int(new[x-1][i])+int(new[x][i]))
                new[x-1].pop(i+1)
            else:
                new[x-1].insert(i,int(new[x-1][i])+int(new[x][i+1]))
                new[x-1].pop(i+1)
    print(f"""{new[0][0]} - максимальную сумму при переходе от вершины до основания треугольника, 
представленного текстовым файлом размером 15КБ triangle.txt в котором содержится треугольник 
с одной сотней строк.""")

    print(f"Program running time {round(time() - start, 2)} sec.")

if __name__ == "__main__":
    main()
